# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: tag-img
on:
  push:
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'  # Only build tag with semantic versioning format

permissions:
  contents: read

jobs:

  conf:
    env:
      IMG_NAME: aactl
      PROVIDER_ID: projects/689738033528/locations/global/workloadIdentityPools/aactl-github-pool/providers/github-provider
      REG_URI: us-west1-docker.pkg.dev/cloudy-build/aactl
      SA_EMAIL: aactl-github-actions-user@cloudy-build.iam.gserviceaccount.com
      PROJECT_ID: cloudy-build

      # Defaults
      BUILDER_VERSION: v1.4.0
      COSIGN_VERSION: v1.13.1
      ERR_VULNERABILITY_SEV: "CRITICAL,HIGH,MEDIUM"
      GO_VERSION: "^1.20.1"

    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      builder_version: ${{ steps.conf.outputs.builder_version }}
      cosign_version: ${{ steps.conf.outputs.cosign_version }}
      err_on_vulnerability_sev: ${{ steps.conf.outputs.err_on_vulnerability_sev }}
      go_version: ${{ steps.conf.outputs.go_version }}
      provider_id: ${{ steps.conf.outputs.provider_id }}
      registry_uri: ${{ steps.conf.outputs.registry_uri }}
      service_account: ${{ steps.conf.outputs.service_account }}
      project_id: ${{ steps.conf.outputs.project_id }}
      image_name: ${{ steps.conf.outputs.image_name }}
    steps:

    - name: Export Config
      id: conf
      run: |
        echo "builder_version=${{ env.BUILDER_VERSION }}" >> $GITHUB_OUTPUT
        echo "cosign_version=${{ env.COSIGN_VERSION }}" >> $GITHUB_OUTPUT
        echo "err_on_vulnerability_sev=${{ env.ERR_VULNERABILITY_SEV }}" >> $GITHUB_OUTPUT
        echo "go_version=${{ env.GO_VERSION }}" >> $GITHUB_OUTPUT
        echo "provider_id=${{ env.PROVIDER_ID }}" >> $GITHUB_OUTPUT
        echo "registry_uri=${{ env.REG_URI }}" >> $GITHUB_OUTPUT
        echo "service_account=${{ env.SA_EMAIL }}" >> $GITHUB_OUTPUT
        echo "project_id=${{ env.PROJECT_ID }}" >> $GITHUB_OUTPUT
        echo "image_name=${{ env.IMG_NAME }}" >> $GITHUB_OUTPUT

  test:
    needs:
    - conf
    uses: ./.github/workflows/test.yaml
    permissions:
      contents: read
      security-events: write
    with:
      go-version: ${{ needs.conf.outputs.go_version }}
      scan-severity: ${{ needs.conf.outputs.err_on_vulnerability_sev }}

  image:
    needs:
    - conf
    - test
    permissions:
      contents: read
      actions: read
      id-token: write
      packages: write
    uses: ./.github/workflows/build.yaml
    with:
      auth_provider: ${{ needs.conf.outputs.provider_id }}
      auth_user: ${{ needs.conf.outputs.service_account }}
      image_name: ${{ needs.conf.outputs.image_name }}
      image_repo: ${{ needs.conf.outputs.registry_uri }}
      docker_file: cmd/aactl/Dockerfile

  sign:
    needs:
    - conf
    - image
    permissions:
      contents: read
      actions: read
      id-token: write
    uses: ./.github/workflows/sign.yaml
    with:
      auth_provider: ${{ needs.conf.outputs.provider_id }}
      auth_user: ${{ needs.conf.outputs.service_account }}
      cosign_version: ${{ needs.conf.outputs.cosign_version }}
      image_digest: ${{ needs.image.outputs.digest }}
      scan_severity: ${{ needs.conf.outputs.err_on_vulnerability_sev }}

  provenance:
    needs:
    - conf
    - image
    permissions:
      contents: read
      actions: read
      id-token: write
      packages: write
    uses: ./.github/workflows/slsa.yaml
    with:
      auth_provider: ${{ needs.conf.outputs.provider_id }}
      auth_user: ${{ needs.conf.outputs.service_account }}
      image_digest: ${{ needs.image.outputs.digest }}

  # Implements import using the newly built image from the 'image' job.
  import:
    needs:
    - conf
    - image
    permissions:
      contents: read
      actions: read
      id-token: write
    uses: ./.github/workflows/import.yaml
    with:
      auth_provider: ${{ needs.conf.outputs.provider_id }}
      auth_user: ${{ needs.conf.outputs.service_account }}
      target_project: ${{ needs.conf.outputs.project_id }}
      image_digest: ${{ needs.image.outputs.digest }}
    secrets:
      access_token: ${{ secrets.ACCESS_TOKEN }}
